"""
GCP Cloud CDN is a content delivery network that uses Google's globally distributed edge points of presence to cache HTTP(S) load balanced content close to your users.
"""
type GcpCloudCdn implements Entity & HealthEntity @key(fields: "id")
@telemetryMappingCondition(conditions: [
    {key: "sw.cloud.gcp.cloudcdn.service.name"},
    {key: "cloud.provider", values: ["gcp"]}
])
{
    """
    Unique identifier of an entity
    """
    id: ID! # No change required

    """
    Entity type.
    """
    type: String! # No change required

    """
    Cloud CDN service name.
    """
    name: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.service.name"]) @property(filterable: true, sortable: true) # No change required

    """
    Entity display name / alias. This value is equal to `name` unless it's explicitly overriden.
    """
    displayName: String # No change required

    """
    Date and time of entity creation in UTC.
    """
    createdTime: String # No change required

    """
    Date and time of last entity update in UTC.
    """
    updatedTime: String # No change required

    """
    Date and time when the entity has last received telemetry in UTC.
    """
    lastSeenTime: String # No change required

    """
    How long the entity may not be receiving updates/telemetry before it should be considered "unknown".
    The platform may stop doing certain things with the entity when it is in unknown state.
    """
    maxUnknownPeriodMinutes: Int # No change required

    """
    Flag telling if given entity is in maintenance mode.
    """
    inMaintenance: Boolean # No change required

    """
    Flag telling if given entity is in unknown state.
    Entity gets to unknown state if it doesn't receive eny telemetry for more than 'maxUnknownPeriodMinutes'.
    """
    isUnknown: Boolean # No change required

    """
    Set of fields to get to things related to a given entity
    """
    related: RelatedEntityFields # No change required

    """
    List of entity extensions that are currently set on given entity
    """
    extensions: [String!] @property(collectionType: SET) # No change required

    """
    Entity tags. Tag is a key-value pair, where there may be only single tag value for the same key.
    """
    tags: [KeyValuePair!] # No change required

    healthScore: HealthScore # No change required

    """
    Cloud provider Name
    """
    cloudProvider: String @telemetryMapping(resourceAttributes: ["cloud.provider"]) @property(
        filterable: false,
        groupable: true,
        sortable: true,
        logicalType: "CloudProviderOption"
    ) # No change required

    """
    Cloud Account to which this Cloud CDN belongs.
    """
    cloudAccount: CloudAccount @relationship(type: "Has", direction: IN) @telemetryRelationship # No change required

    """
    GCP Account Number
    """
    cloudAccountNumber: String! @telemetryMapping(resourceAttributes:["cloud.project.id"]) # No change required

    """
    The cloud account Entity ID
    """
    cloudAccountEntityId: String @telemetryMapping(resourceAttributes: ["sw.entity.cloudaccount.id"]) # No change required

    """
    Unique ID within SWO to indentify the resource based on cloud attributes
    """
    swid: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.service.swid"], hashKeyOrder: 1) # No change required

    """
    service category to which it belongs to eg: Networking, Database, Compute.
    """
    serviceCategory: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.service.category"]) # No change required

    """
    Separate geographic area that GCP uses to house its infrastructure.
    """
    region: String! @telemetryMapping(resourceAttributes: ["cloud.region"]) @property(filterable: true) # No change required

    """
    Timestamp when the Cloud CDN service was created
    """
    creationTimestamp: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.creation.timestamp"]) @property(filterable: true, sortable: true)

    """
    Description of the Cloud CDN service
    """
    description: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.service.description"]) @property(filterable: true, sortable: true)

    """
    Self link URL for the Cloud CDN service
    """
    selfLink: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.service.self.link"]) @property(filterable: true, sortable: true)

    """
    Protocol used by the Cloud CDN service
    """
    protocol: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.service.protocol"]) @property(filterable: true, sortable: true)

    """
    Port name configured for the Cloud CDN service
    """
    portName: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.service.port.name"]) @property(filterable: true, sortable: true)

    """
    Health checks configured for the Cloud CDN service
    """
    healthChecks: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.service.health.checks"]) @property(filterable: true, sortable: true)

    """
    Backend group configuration for the Cloud CDN service
    """
    backendsGroup: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.backends.group"]) @property(filterable: true, sortable: true)

    """
    Balancing mode configured for backends
    """
    backendsBalancingMode: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.backends.balancing.mode"]) @property(filterable: true, sortable: true)

    """
    Maximum utilization percentage for backends
    """
    backendsMaxUtilization: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.backends.max.utilization"]) @property(filterable: true, sortable: true)

    """
    Flag indicating if CDN is enabled for the service
    """
    enableCdn: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.enable.cdn"]) @property(filterable: true, sortable: true)

    """
    Cache mode configured in the CDN policy
    """
    cdnPolicyCacheMode: String @telemetryMapping(resourceAttributes: ["sw.cloud.gcp.cloudcdn.policy.cache.mode"]) @property(filterable: true, sortable: true)

    """
    Backend latencies for HTTPS requests
    """
    httpsBackendLatencies: Metric! @metric(name: "gcp.cdn.googleapis.com.https.backend_latencies", units: "milliseconds")

    """
    Count of HTTPS requests
    """
    httpsRequestCount: Metric! @metric(name: "gcp.cdn.googleapis.com.https.request_count", units: "count")

    """
    Total latencies for HTTPS requests
    """
    httpsTotalLatencies: Metric! @metric(name: "gcp.cdn.googleapis.com.https.total_latencies", units: "milliseconds")

    """
    Count of HTTPS backend requests
    """
    httpsBackendRequestCount: Metric! @metric(name: "gcp.cdn.googleapis.com.https.backend_request_count", units: "count")

    """
    Backend latencies for external regional HTTPS requests
    """
    httpsExternalRegionalBackendLatencies: Metric! @metric(name: "gcp.cdn.googleapis.com.https.external.regional.backend_latencies", units: "milliseconds")

    """
    Count of external regional HTTPS requests
    """
    httpsExternalRegionalRequestCount: Metric! @metric(name: "gcp.cdn.googleapis.com.https.external.regional.request_count", units: "count")

    """
    Total latencies for external regional HTTPS requests
    """
    httpsExternalRegionalTotalLatencies: Metric! @metric(name: "gcp.cdn.googleapis.com.https.external.regional.total_latencies", units: "milliseconds")

    """
    Backend latencies for internal HTTPS requests
    """
    httpsInternalBackendLatencies: Metric! @metric(name: "gcp.cdn.googleapis.com.https.internal.backend_latencies", units: "milliseconds")

    """
    Count of internal HTTPS requests
    """
    httpsInternalRequestCount: Metric! @metric(name: "gcp.cdn.googleapis.com.https.internal.request_count", units: "count")

    """
    Total latencies for internal HTTPS requests
    """
    httpsInternalTotalLatencies: Metric! @metric(name: "gcp.cdn.googleapis.com.https.internal.total_latencies", units: "milliseconds")

    """
    Count of backend request bytes
    """
    httpsBackendRequestBytesCount: Metric! @metric(name: "gcp.cdn.googleapis.com.https.backend_request_bytes_count", units: "bytes")

    """
    Count of backend response bytes
    """
    httpsBackendResponseBytesCount: Metric! @metric(name: "gcp.cdn.googleapis.com.https.backend_response_bytes_count", units: "bytes")
}